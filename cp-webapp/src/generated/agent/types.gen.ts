// This file is auto-generated by @hey-api/openapi-ts

export type BodyUploadAssetsApiV1ProjectsProjectIdUploadPost = {
    files: Array<Blob | File>;
};

/**
 * Chat request schema.
 */
export type ChatRequest = {
    /**
     * Unique identifier for the project
     */
    project_id: string;
    message: string | Array<TextBlock | ImageBlock>;
    /**
     * Request context information
     */
    context: RequestContext;
};

/**
 * Request model for generating project summary.
 */
export type GenerateSummaryRequest = {
    /**
     * User message to analyze for generating project name and description
     */
    message: string;
};

/**
 * Response model for generated project summary.
 */
export type GenerateSummaryResponse = {
    /**
     * Generated project name
     */
    name: string;
    /**
     * Generated project description
     */
    description: string;
};

export type HttpValidationError = {
    detail?: Array<ValidationError>;
};

export type ImageBlock = {
    type: string;
    image_url: ImageUrl;
};

export type ImageUrl = {
    url: string;
};

/**
 * Response model for listing project paths.
 */
export type ListProjectPathsResponse = {
    paths: Array<string>;
};

/**
 * Request model for SQL migration execution.
 */
export type MigrationRequest = {
    sql: string;
    name?: string | null;
};

/**
 * Response model for SQL migration execution.
 */
export type MigrationResponse = {
    /**
     * Name of the migration
     */
    name: string;
    /**
     * Whether the migration was successful
     */
    success: boolean;
    /**
     * When the migration was executed
     */
    timestamp: string;
    /**
     * Error message if failed
     */
    error?: string | null;
};

export type Project = {
    id?: string;
    name?: string;
    description?: string | null;
    user_id?: string | null;
    created_at?: string;
    updated_at?: string;
};

/**
 * Project creation request schema.
 */
export type ProjectCreateRequest = {
    /**
     * Unique identifier for the project
     */
    project_id: string;
    /**
     * Project name, defaults to shortened project_id
     */
    name?: string | null;
};

/**
 * Context information for chat requests.
 */
export type RequestContext = {
    previewPath?: string | null;
};

export type SecretRequest = {
    name: string;
    value: string;
};

export type TextBlock = {
    type: string;
    text: string;
};

export type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};

export type ChatApiV1ChatPostData = {
    body: ChatRequest;
    path?: never;
    query?: never;
    url: '/api/v1/chat/';
};

export type ChatApiV1ChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ChatApiV1ChatPostError = ChatApiV1ChatPostErrors[keyof ChatApiV1ChatPostErrors];

export type ChatApiV1ChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type CreateProjectApiV1ProjectsPostData = {
    body: ProjectCreateRequest;
    path?: never;
    query?: never;
    url: '/api/v1/projects/';
};

export type CreateProjectApiV1ProjectsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type CreateProjectApiV1ProjectsPostError = CreateProjectApiV1ProjectsPostErrors[keyof CreateProjectApiV1ProjectsPostErrors];

export type CreateProjectApiV1ProjectsPostResponses = {
    /**
     * Successful Response
     */
    201: Project;
};

export type CreateProjectApiV1ProjectsPostResponse = CreateProjectApiV1ProjectsPostResponses[keyof CreateProjectApiV1ProjectsPostResponses];

export type IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/integrate-supabase';
};

export type IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostError = IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostErrors[keyof IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostErrors];

export type IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponse = IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponses[keyof IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponses];

export type SetProjectSecretApiV1ProjectsProjectIdSecretsPostData = {
    body: SecretRequest;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/secrets';
};

export type SetProjectSecretApiV1ProjectsProjectIdSecretsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type SetProjectSecretApiV1ProjectsProjectIdSecretsPostError = SetProjectSecretApiV1ProjectsProjectIdSecretsPostErrors[keyof SetProjectSecretApiV1ProjectsProjectIdSecretsPostErrors];

export type SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};

export type SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponse = SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponses[keyof SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponses];

export type UploadAssetsApiV1ProjectsProjectIdUploadPostData = {
    body: BodyUploadAssetsApiV1ProjectsProjectIdUploadPost;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/upload';
};

export type UploadAssetsApiV1ProjectsProjectIdUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type UploadAssetsApiV1ProjectsProjectIdUploadPostError = UploadAssetsApiV1ProjectsProjectIdUploadPostErrors[keyof UploadAssetsApiV1ProjectsProjectIdUploadPostErrors];

export type UploadAssetsApiV1ProjectsProjectIdUploadPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type UploadAssetsApiV1ProjectsProjectIdUploadPostResponse = UploadAssetsApiV1ProjectsProjectIdUploadPostResponses[keyof UploadAssetsApiV1ProjectsProjectIdUploadPostResponses];

export type GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData = {
    body: GenerateSummaryRequest;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/generate-summary';
};

export type GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostError = GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostErrors[keyof GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostErrors];

export type GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponses = {
    /**
     * Successful Response
     */
    200: GenerateSummaryResponse;
};

export type GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponse = GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponses[keyof GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponses];

export type ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData = {
    body: MigrationRequest;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/migrations';
};

export type ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostError = ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostErrors[keyof ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostErrors];

export type ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponses = {
    /**
     * Successful Response
     */
    200: MigrationResponse;
};

export type ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponse = ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponses[keyof ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponses];

export type ListProjectPathsApiV1ProjectsProjectIdPathsGetData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/paths';
};

export type ListProjectPathsApiV1ProjectsProjectIdPathsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type ListProjectPathsApiV1ProjectsProjectIdPathsGetError = ListProjectPathsApiV1ProjectsProjectIdPathsGetErrors[keyof ListProjectPathsApiV1ProjectsProjectIdPathsGetErrors];

export type ListProjectPathsApiV1ProjectsProjectIdPathsGetResponses = {
    /**
     * Successful Response
     */
    200: ListProjectPathsResponse;
};

export type ListProjectPathsApiV1ProjectsProjectIdPathsGetResponse = ListProjectPathsApiV1ProjectsProjectIdPathsGetResponses[keyof ListProjectPathsApiV1ProjectsProjectIdPathsGetResponses];

export type DownloadProjectApiV1ProjectsProjectIdDownloadGetData = {
    body?: never;
    path: {
        project_id: string;
    };
    query?: never;
    url: '/api/v1/projects/{project_id}/download';
};

export type DownloadProjectApiV1ProjectsProjectIdDownloadGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};

export type DownloadProjectApiV1ProjectsProjectIdDownloadGetError = DownloadProjectApiV1ProjectsProjectIdDownloadGetErrors[keyof DownloadProjectApiV1ProjectsProjectIdDownloadGetErrors];

export type DownloadProjectApiV1ProjectsProjectIdDownloadGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};

export type RootGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type RootGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type RootGetResponse = RootGetResponses[keyof RootGetResponses];

export type HealthCheckHealthGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/health';
};

export type HealthCheckHealthGetResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: unknown;
    };
};

export type HealthCheckHealthGetResponse = HealthCheckHealthGetResponses[keyof HealthCheckHealthGetResponses];