// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { ChatApiV1ChatPostData, ChatApiV1ChatPostError, CreateProjectApiV1ProjectsPostData, CreateProjectApiV1ProjectsPostResponse, CreateProjectApiV1ProjectsPostError, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponse, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostError, SetProjectSecretApiV1ProjectsProjectIdSecretsPostData, SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponse, SetProjectSecretApiV1ProjectsProjectIdSecretsPostError, UploadAssetsApiV1ProjectsProjectIdUploadPostData, UploadAssetsApiV1ProjectsProjectIdUploadPostResponse, UploadAssetsApiV1ProjectsProjectIdUploadPostError, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponse, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostError, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponse, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostError, ListProjectPathsApiV1ProjectsProjectIdPathsGetData, ListProjectPathsApiV1ProjectsProjectIdPathsGetResponse, ListProjectPathsApiV1ProjectsProjectIdPathsGetError, DownloadProjectApiV1ProjectsProjectIdDownloadGetData, DownloadProjectApiV1ProjectsProjectIdDownloadGetError, RootGetData, RootGetResponse, HealthCheckHealthGetData, HealthCheckHealthGetResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Chat
 * Process a chat message with streaming response.
 *
 * Args:
 * request: The chat request containing MessageContent and project info
 *
 * Returns:
 * A streaming response of SSE events
 */
export const chatApiV1ChatPost = <ThrowOnError extends boolean = false>(options: Options<ChatApiV1ChatPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, ChatApiV1ChatPostError, ThrowOnError>({
        url: '/api/v1/chat/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Project
 * Create a new project.
 *
 * Args:
 * request: Project creation request containing project_id and optional name
 *
 * Returns:
 * Project: The created project details
 *
 * Raises:
 * HTTPException: 400 if project ID is invalid
 * HTTPException: 500 if project creation fails
 */
export const createProjectApiV1ProjectsPost = <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<CreateProjectApiV1ProjectsPostResponse, CreateProjectApiV1ProjectsPostError, ThrowOnError>({
        url: '/api/v1/projects/',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Integrate Supabase With Project
 * Integrate Supabase with an existing project.
 *
 * Args:
 * project_id: The ID of the project to integrate Supabase with
 *
 * Returns:
 * Dict with success message
 *
 * Raises:
 * HTTPException: 404 if project doesn't exist
 * HTTPException: 500 if integration fails
 */
export const integrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePost = <ThrowOnError extends boolean = false>(options: Options<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostData, ThrowOnError>) => {
    return (options?.client ?? client).post<IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostResponse, IntegrateSupabaseWithProjectApiV1ProjectsProjectIdIntegrateSupabasePostError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/integrate-supabase',
        ...options
    });
};

/**
 * Set Project Secret
 * Add or update a secret in the project's Supabase instance.
 *
 * Args:
 * project_id: The ID of the project
 * request: Secret request containing name and value
 *
 * Returns:
 * Dict with success message
 *
 * Raises:
 * HTTPException: 404 if project doesn't exist
 * HTTPException: 500 if setting the secret fails
 */
export const setProjectSecretApiV1ProjectsProjectIdSecretsPost = <ThrowOnError extends boolean = false>(options: Options<SetProjectSecretApiV1ProjectsProjectIdSecretsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<SetProjectSecretApiV1ProjectsProjectIdSecretsPostResponse, SetProjectSecretApiV1ProjectsProjectIdSecretsPostError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/secrets',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload Assets
 * Upload multiple assets to a project's public directory.
 *
 * Args:
 * project_id: The ID of the project
 * files: List of files to upload
 *
 * Returns:
 * Dict containing success message and uploaded file information
 *
 * Raises:
 * HTTPException: If the project doesn't exist or upload fails
 */
export const uploadAssetsApiV1ProjectsProjectIdUploadPost = <ThrowOnError extends boolean = false>(options: Options<UploadAssetsApiV1ProjectsProjectIdUploadPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<UploadAssetsApiV1ProjectsProjectIdUploadPostResponse, UploadAssetsApiV1ProjectsProjectIdUploadPostError, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/projects/{project_id}/upload',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Generate Summary
 * Generate a project name and description based on the user's first message.
 *
 * Args:
 * project_id: The ID of the project
 * request: Contains the user's message
 *
 * Returns:
 * Generated name and description for the project
 *
 * Raises:
 * HTTPException: 404 if project doesn't exist
 * HTTPException: 500 if operation fails
 */
export const generateSummaryApiV1ProjectsProjectIdGenerateSummaryPost = <ThrowOnError extends boolean = false>(options: Options<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostResponse, GenerateSummaryApiV1ProjectsProjectIdGenerateSummaryPostError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/generate-summary',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Execute Migration
 * Execute a SQL migration against the project's Supabase database.
 *
 * Args:
 * project_id: The ID of the project
 * migration: Migration request containing SQL to execute and optional name
 *
 * Returns:
 * MigrationResponse: Migration execution details including success status and results
 *
 * Raises:
 * HTTPException: 404 if project doesn't exist
 * HTTPException: 400 if SQL is empty or Supabase is not integrated
 * HTTPException: 500 if migration execution fails
 */
export const executeMigrationApiV1ProjectsProjectIdMigrationsPost = <ThrowOnError extends boolean = false>(options: Options<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostData, ThrowOnError>) => {
    return (options?.client ?? client).post<ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostResponse, ExecuteMigrationApiV1ProjectsProjectIdMigrationsPostError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/migrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List Project Paths
 * List all pages/routes in a Vite project.
 *
 * Args:
 * project_id: The ID of the project
 *
 * Returns:
 * ListProjectPathsResponse: List of page paths found in the project
 *
 * Raises:
 * HTTPException: 404 if project doesn't exist or directory not found
 * HTTPException: 500 if operation fails
 */
export const listProjectPathsApiV1ProjectsProjectIdPathsGet = <ThrowOnError extends boolean = false>(options: Options<ListProjectPathsApiV1ProjectsProjectIdPathsGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<ListProjectPathsApiV1ProjectsProjectIdPathsGetResponse, ListProjectPathsApiV1ProjectsProjectIdPathsGetError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/paths',
        ...options
    });
};

/**
 * Download Project
 * Download the source code of a project as a zip file.
 *
 * Args:
 * project_id: The ID of the project
 * background_tasks: FastAPI background tasks for cleanup
 *
 * Returns:
 * FileResponse: A zip file containing the project source code, respecting .gitignore
 *
 * Raises:
 * HTTPException: 404 if project doesn't exist or directory not found
 * HTTPException: 500 if operation fails
 */
export const downloadProjectApiV1ProjectsProjectIdDownloadGet = <ThrowOnError extends boolean = false>(options: Options<DownloadProjectApiV1ProjectsProjectIdDownloadGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, DownloadProjectApiV1ProjectsProjectIdDownloadGetError, ThrowOnError>({
        url: '/api/v1/projects/{project_id}/download',
        ...options
    });
};

/**
 * Root
 * Root endpoint.
 */
export const rootGet = <ThrowOnError extends boolean = false>(options?: Options<RootGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<RootGetResponse, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(options?: Options<HealthCheckHealthGetData, ThrowOnError>) => {
    return (options?.client ?? client).get<HealthCheckHealthGetResponse, unknown, ThrowOnError>({
        url: '/health',
        ...options
    });
};